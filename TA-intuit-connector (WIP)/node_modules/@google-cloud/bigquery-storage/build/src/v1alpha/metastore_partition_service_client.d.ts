import type * as gax from 'google-gax';
import type { Callback, CallOptions, Descriptors, ClientOptions } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  BigQuery Metastore Partition Service API.
 *  This service is used for managing metastore partitions in BigQuery metastore.
 *  The service supports only batch operations for write.
 * @class
 * @memberof v1alpha
 */
export declare class MetastorePartitionServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    private _universeDomain;
    private _servicePath;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    metastorePartitionServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of MetastorePartitionServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new MetastorePartitionServiceClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts?: ClientOptions, gaxInstance?: typeof gax | typeof gax.fallback);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint(): string;
    get universeDomain(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    /**
     * Adds metastore partitions to a table.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Reference to the table to where the metastore partitions to be
     *   added, in the format of
     *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
     * @param {number[]} request.requests
     *   Required. Requests to add metastore partitions to the table.
     * @param {boolean} [request.skipExistingPartitions]
     *   Optional. Mimics the ifNotExists flag in IMetaStoreClient
     *   add_partitions(..). If the flag is set to false, the server will return
     *   ALREADY_EXISTS if any partition already exists. If the flag is set to true,
     *   the server will skip existing partitions and insert only the non-existing
     *   partitions.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1alpha.BatchCreateMetastorePartitionsResponse|BatchCreateMetastorePartitionsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.batch_create_metastore_partitions.js</caption>
     * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_BatchCreateMetastorePartitions_async
     */
    batchCreateMetastorePartitions(request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse,
        (protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest | undefined),
        {} | undefined
    ]>;
    batchCreateMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse, protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    batchCreateMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsResponse, protos.google.cloud.bigquery.storage.v1alpha.IBatchCreateMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Deletes metastore partitions from a table.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Reference to the table to which these metastore partitions
     *   belong, in the format of
     *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
     * @param {number[]} request.partitionValues
     *   Required. The list of metastore partitions (identified by its values) to be
     *   deleted. A maximum of 100 partitions can be deleted in a batch.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.protobuf.Empty|Empty}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.batch_delete_metastore_partitions.js</caption>
     * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_BatchDeleteMetastorePartitions_async
     */
    batchDeleteMetastorePartitions(request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest | undefined),
        {} | undefined
    ]>;
    batchDeleteMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    batchDeleteMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.bigquery.storage.v1alpha.IBatchDeleteMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Updates metastore partitions in a table.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Reference to the table to which these metastore partitions
     *   belong, in the format of
     *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
     * @param {number[]} request.requests
     *   Required. Requests to update metastore partitions in the table.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1alpha.BatchUpdateMetastorePartitionsResponse|BatchUpdateMetastorePartitionsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.batch_update_metastore_partitions.js</caption>
     * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_BatchUpdateMetastorePartitions_async
     */
    batchUpdateMetastorePartitions(request?: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse,
        (protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest | undefined),
        {} | undefined
    ]>;
    batchUpdateMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse, protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    batchUpdateMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsResponse, protos.google.cloud.bigquery.storage.v1alpha.IBatchUpdateMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * Gets metastore partitions from a table.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. Reference to the table to which these metastore partitions
     *   belong, in the format of
     *   projects/{project}/locations/{location}/datasets/{dataset}/tables/{table}.
     * @param {string} [request.filter]
     *   Optional. SQL text filtering statement, similar to a WHERE clause in a
     *   query. Only supports single-row expressions.  Aggregate functions are not
     *   supported.
     *
     *   Examples: "int_field > 5"
     *             "date_field = CAST('2014-9-27' as DATE)"
     *             "nullable_field is not NULL"
     *             "st_equals(geo_field, st_geofromtext("POINT(2, 2)"))"
     *             "numeric_field BETWEEN 1.0 AND 5.0"
     *   Restricted to a maximum length for 1 MB.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing {@link protos.google.cloud.bigquery.storage.v1alpha.ListMetastorePartitionsResponse|ListMetastorePartitionsResponse}.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.list_metastore_partitions.js</caption>
     * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_ListMetastorePartitions_async
     */
    listMetastorePartitions(request?: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse,
        (protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest | undefined),
        {} | undefined
    ]>;
    listMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest, options: CallOptions, callback: Callback<protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse, protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    listMetastorePartitions(request: protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest, callback: Callback<protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsResponse, protos.google.cloud.bigquery.storage.v1alpha.IListMetastorePartitionsRequest | null | undefined, {} | null | undefined>): void;
    /**
     * This is a bi-di streaming rpc method that allows the client to send
     * a stream of partitions and commit all of them atomically at the end.
     * If the commit is successful, the server will return a
     * response and close the stream. If the commit fails (due to duplicate
     * partitions or other reason), the server will close the stream with an
     * error. This method is only available via the gRPC API (not REST).
     *
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which is both readable and writable. It accepts objects
     *   representing {@link protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsRequest|StreamMetastorePartitionsRequest} for write() method, and
     *   will emit objects representing {@link protos.google.cloud.bigquery.storage.v1alpha.StreamMetastorePartitionsResponse|StreamMetastorePartitionsResponse} on 'data' event asynchronously.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#bi-directional-streaming | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v1alpha/metastore_partition_service.stream_metastore_partitions.js</caption>
     * region_tag:bigquerystorage_v1alpha_generated_MetastorePartitionService_StreamMetastorePartitions_async
     */
    streamMetastorePartitions(options?: CallOptions): gax.CancellableStream;
    /**
     * Return a fully-qualified readStream resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} session
     * @param {string} stream
     * @returns {string} Resource name string.
     */
    readStreamPath(project: string, location: string, session: string, stream: string): string;
    /**
     * Parse the project from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromReadStreamName(readStreamName: string): string | number;
    /**
     * Parse the location from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromReadStreamName(readStreamName: string): string | number;
    /**
     * Parse the session from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the session.
     */
    matchSessionFromReadStreamName(readStreamName: string): string | number;
    /**
     * Parse the stream from ReadStream resource.
     *
     * @param {string} readStreamName
     *   A fully-qualified path representing ReadStream resource.
     * @returns {string} A string representing the stream.
     */
    matchStreamFromReadStreamName(readStreamName: string): string | number;
    /**
     * Return a fully-qualified table resource name string.
     *
     * @param {string} project
     * @param {string} dataset
     * @param {string} table
     * @returns {string} Resource name string.
     */
    tablePath(project: string, dataset: string, table: string): string;
    /**
     * Parse the project from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTableName(tableName: string): string | number;
    /**
     * Parse the dataset from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromTableName(tableName: string): string | number;
    /**
     * Parse the table from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromTableName(tableName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
