"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArrowTableReader = void 0;
const logger_1 = require("../util/logger");
const arrow_transform_1 = require("./arrow_transform");
const read_session_1 = require("./read_session");
const data_format_1 = require("./data_format");
/**
 * A BigQuery Storage API Reader that can be used to read data
 * from BigQuery Tables using the Storage API in Arrow format.
 *
 * @class
 * @memberof reader
 */
class ArrowTableReader {
    /**
     * Creates a new ArrowTableReader instance. Usually created via
     * ReadClient.createArrowTableReader().
     *
     * @param {ReadClient} readClient - Storage Read Client.
     * @param {TableReference} table - target table to read data from.
     */
    constructor(readClient, tableRef) {
        this._tableRef = tableRef;
        this._session = new read_session_1.ReadSession(readClient, tableRef, data_format_1.ArrowFormat);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    trace(msg, ...otherArgs) {
        (0, logger_1.logger)('arrow_table_reader', `[table: ${this._tableRef.tableId}]`, msg, ...otherArgs);
    }
    getSessionInfo() {
        return this._session.getSessionInfo();
    }
    /**
     * Get a byte stream of Arrow Record Batch.
     *
     * @param {GetStreamOptions} options
     */
    async getStream(options) {
        this.trace('getStream', options);
        const stream = await this._session.getStream(options);
        return stream.pipe(new arrow_transform_1.ArrowRawTransform());
    }
    /**
     * Get a stream of Arrow RecordBatch objects.
     *
     * @param {GetStreamOptions} options
     */
    async getRecordBatchStream(options) {
        this.trace('getRecordBatchStream', options);
        const stream = await this._session.getStream(options);
        const info = this._session.getSessionInfo();
        return stream
            .pipe(new arrow_transform_1.ArrowRawTransform())
            .pipe(new arrow_transform_1.ArrowRecordReaderTransform(info))
            .pipe(new arrow_transform_1.ArrowRecordBatchTransform());
    }
    close() {
        this._session.close();
    }
}
exports.ArrowTableReader = ArrowTableReader;
//# sourceMappingURL=arrow_reader.js.map