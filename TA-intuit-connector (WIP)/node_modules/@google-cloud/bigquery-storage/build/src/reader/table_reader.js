"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableReader = void 0;
const logger_1 = require("../util/logger");
const arrow_transform_1 = require("./arrow_transform");
const arrow_reader_1 = require("./arrow_reader");
/**
 * A BigQuery Storage API Reader that can be used to reader data into BigQuery Table
 * using the Storage API.
 *
 * @class
 * @memberof reader
 */
class TableReader {
    /**
     * Creates a new Reader instance.
     *
     * @param {Object} params - The parameters for the JSONWriter.
     * @param {TableReference} params.table - The stream connection
     *   to the BigQuery streaming insert operation.
     */
    constructor(readClient, tableRef) {
        this._tableRef = tableRef;
        this._arrowReader = new arrow_reader_1.ArrowTableReader(readClient, tableRef);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    trace(msg, ...otherArgs) {
        (0, logger_1.logger)('table_reader', `[table: ${this._tableRef.tableId}]`, msg, ...otherArgs);
    }
    getSessionInfo() {
        return this._arrowReader.getSessionInfo();
    }
    async getRowStream(options) {
        this.trace('getRowStream', options);
        const stream = await this._arrowReader.getRecordBatchStream(options);
        return stream.pipe(new arrow_transform_1.ArrowRecordBatchTableRowTransform());
    }
    /**
     * Retrieves table data as rows in same format
     * as tabledata.list BigQuery v2 API.
     * Extra parameters returned contain Storage Read API specific information
     * like ReadSession and totalRows count.
     *
     * @param {options} GetRowsOptions
     */
    async getRows(options) {
        this.trace('getRows', options);
        const stream = await this.getRowStream(options);
        const session = this.getSessionInfo();
        return new Promise((resolve, reject) => {
            const rows = [];
            stream.on('data', (data) => {
                rows.push(data);
            });
            stream.on('error', err => {
                this.trace('reject called on joined stream', err);
                reject(err);
            });
            stream.on('end', () => {
                var _a;
                this.trace('resolve called on joined stream');
                const totalRows = `${(_a = session === null || session === void 0 ? void 0 : session.estimatedRowCount) !== null && _a !== void 0 ? _a : 0}`;
                resolve([rows, session !== null && session !== void 0 ? session : null, { rows, totalRows }]);
            });
        });
    }
    close() {
        this._arrowReader.close();
    }
}
exports.TableReader = TableReader;
//# sourceMappingURL=table_reader.js.map