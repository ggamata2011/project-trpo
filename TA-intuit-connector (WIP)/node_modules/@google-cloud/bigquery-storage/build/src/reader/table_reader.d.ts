import { ResourceStream } from '@google-cloud/paginator';
import * as protos from '../../protos/protos';
import { TableReference, ReadClient } from './read_client';
type ReadSessionInfo = protos.google.cloud.bigquery.storage.v1.IReadSession;
interface TableCell {
    v?: any;
}
interface TableRow {
    /**
     * Represents a single row in the result set, consisting of one or more fields.
     */
    f?: Array<TableCell>;
}
interface TableDataList {
    /**
     * Rows of results.
     */
    rows?: Array<TableRow>;
    /**
     * Total rows of the entire table. In order to show default value 0 we have to present it as string.
     */
    totalRows?: string;
}
type GetRowsOptions = {
    /**
     * Row limit of the table.
     */
    maxResults?: number;
    /**
     * Subset of fields to return, supports select into sub fields. Example: selected_fields = "a,e.d.f";
     */
    selectedFields?: string;
};
type RowsResponse = [any[], ReadSessionInfo | null, TableDataList];
/**
 * A BigQuery Storage API Reader that can be used to reader data into BigQuery Table
 * using the Storage API.
 *
 * @class
 * @memberof reader
 */
export declare class TableReader {
    private _arrowReader;
    private _tableRef;
    /**
     * Creates a new Reader instance.
     *
     * @param {Object} params - The parameters for the JSONWriter.
     * @param {TableReference} params.table - The stream connection
     *   to the BigQuery streaming insert operation.
     */
    constructor(readClient: ReadClient, tableRef: TableReference);
    private trace;
    getSessionInfo(): ReadSessionInfo | undefined | null;
    getRowStream(options?: GetRowsOptions): Promise<ResourceStream<TableRow>>;
    /**
     * Retrieves table data as rows in same format
     * as tabledata.list BigQuery v2 API.
     * Extra parameters returned contain Storage Read API specific information
     * like ReadSession and totalRows count.
     *
     * @param {options} GetRowsOptions
     */
    getRows(options?: GetRowsOptions): Promise<RowsResponse>;
    close(): void;
}
export {};
