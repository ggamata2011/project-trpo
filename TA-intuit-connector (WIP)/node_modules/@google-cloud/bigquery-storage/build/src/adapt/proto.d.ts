import * as protos from '../../protos/protos';
import { AdaptOption } from './options';
type TableSchema = protos.google.cloud.bigquery.storage.v1.ITableSchema;
type DescriptorProto = protos.google.protobuf.DescriptorProto;
declare const DescriptorProto: typeof protos.google.protobuf.DescriptorProto;
/** Builds a DescriptorProto for a given table schema using proto2 syntax.
 *
 * If a column name is not compatible as a protobuf field name, it will be replaced
 * with a placeholder name. The placeholder name is generated by removing all invalid
 * characters from the column name and replacing all dashes with underscores. If the
 * column name doesn't have any valid characters, we generate a placeholder name using
 * the field number `field{fieldNumber}`.
 *
 * @param schema - a BigQuery Storage TableSchema.
 * @param scope - scope to namespace protobuf structs.
 * @returns DescriptorProto
 */
export declare function convertStorageSchemaToProto2Descriptor(schema: TableSchema, scope: string, ...opts: AdaptOption[]): DescriptorProto;
/** Builds a DescriptorProto for a given table schema using proto3 syntax.
 *
 * If a column name is not compatible as a protobuf field name, it will be replaced
 * with a placeholder name. The placeholder name is generated by removing all invalid
 * characters from the column name and replacing all dashes with underscores. If the
 * column name doesn't have any valid characters, we generate a placeholder name using
 * the field number `field{fieldNumber}`.
 *
 * @param schema - a Bigquery TableSchema.
 * @param scope - scope to namespace protobuf structs.
 * @returns DescriptorProto
 */
export declare function convertStorageSchemaToProto3Descriptor(schema: TableSchema, scope: string, ...opts: AdaptOption[]): DescriptorProto;
/**
 * Builds a self-contained DescriptorProto suitable for communicating schema
 * information with the BigQuery Storage write API. It's primarily used for cases where users are
 * interested in sending data using a predefined protocol buffer message.
 * @param dp - DescriptorProto to be bundled.
 * @return DescriptorProto
 */
export declare function normalizeDescriptor(dp: DescriptorProto): DescriptorProto;
/** Checks if the field name is compatible with proto field naming convention.
 *
 * @internal
 * @param fieldName name for the field
 * @return true if the field name is comptaible with proto naming convention,
 *    otherwise, returns false.
 */
export declare function isProtoCompatible(fieldName: string): boolean;
/** Generates a placeholder name that consists of a sanitized field name with only valid characters.
 * If the field doesn't have any valid characters, we generate a placeholder name using the field number.
 * We replace all dashes with underscores as they are not allowed for proto field names.
 *
 * @internal
 * @param fieldName table field name
 * @param fNumber proto field number
 * @return the generated placeholder field name
 */
export declare function generatePlaceholderFieldName(fieldName: string): string;
export {};
